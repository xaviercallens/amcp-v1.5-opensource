apiVersion: v1
kind: Namespace
metadata:
  name: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/version: "1.3.0"
    istio-injection: enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: amcp-config
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: config
data:
  application.properties: |
    # AMCP v1.3 Runtime Configuration
    amcp.context.namespace=amcp-system
    amcp.context.region=us-west-2
    amcp.broker.type=kubernetes
    amcp.broker.kubernetes.namespace=amcp-system
    amcp.migration.enabled=true
    amcp.migration.kubernetes.enabled=true
    amcp.migration.load-balancing=true
    amcp.agent.max-instances=100
    amcp.metrics.enabled=true
    amcp.tracing.enabled=true
    amcp.logging.level=INFO
    amcp.logging.format=json
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: amcp-agent
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: amcp-agent-role
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: amcp-agent-binding
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: amcp-agent
  namespace: amcp-system
roleRef:
  kind: ClusterRole
  name: amcp-agent-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: amcp-agent-context
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: agent-context
    app.kubernetes.io/version: "1.3.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: amcp
      app.kubernetes.io/component: agent-context
  template:
    metadata:
      labels:
        app.kubernetes.io/name: amcp
        app.kubernetes.io/component: agent-context
        app.kubernetes.io/version: "1.3.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: amcp-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: amcp-agent
        image: amcp/agent-context:1.3.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: api
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 8081
          protocol: TCP
        - name: management
          containerPort: 8082
          protocol: TCP
        env:
        - name: AMCP_CONTEXT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: AMCP_CLUSTER_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AMCP_REGION
          value: "us-west-2"
        - name: AMCP_EVENT_BROKER_TYPE
          value: "kubernetes"
        - name: AMCP_METRICS_ENABLED
          value: "true"
        - name: AMCP_TRACING_ENABLED
          value: "true"
        - name: JAVA_OPTS
          value: "-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/amcp/tmp"
        volumeMounts:
        - name: config-volume
          mountPath: /opt/amcp/config
          readOnly: true
        - name: data-volume
          mountPath: /opt/amcp/data
        - name: tmp-volume
          mountPath: /opt/amcp/tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: management
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: management
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "curl -X POST http://localhost:8082/shutdown && sleep 15"]
      volumes:
      - name: config-volume
        configMap:
          name: amcp-config
      - name: data-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values: [amcp]
                - key: app.kubernetes.io/component
                  operator: In
                  values: [agent-context]
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 45
---
apiVersion: v1
kind: Service
metadata:
  name: amcp-agent-context
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: agent-context
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8080
    targetPort: api
    protocol: TCP
  - name: metrics
    port: 8081
    targetPort: metrics
    protocol: TCP
  - name: management
    port: 8082
    targetPort: management
    protocol: TCP
  selector:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: agent-context
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: amcp-agent-context-hpa
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: amcp-agent-context
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 4
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: amcp-network-policy
  namespace: amcp-system
  labels:
    app.kubernetes.io/name: amcp
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: amcp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: amcp
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: amcp
    ports:
    - protocol: TCP
      port: 8080
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53